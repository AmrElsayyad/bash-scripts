#!/usr/bin/env bash

# Title:         urldecode
# Description:   decodes given url
# Author:        Amr Elsayyad <amrelsayyad96@outlook.com>
# Date:          2022-09-08
# Version:       0.0.1

# Exit codes
# ==========
# 0   no error
# 1   script interrupted
# 2   missing argument
# 3   invalid argument
# 4   file does not exist


# >>>>>>>>>>>>>>>>>>>>>>>> handler functions >>>>>>>>>>>>>>>>>>>>>>>>

# CTRL+C event handler
function on_ctrl_c() {
    echo # Set cursor to the next line of '^C'
    tput cnorm # show cursor. You need this if animation is used.
    # i.e. clean-up code here
    exit 1 # Don't remove. Use a number (1-255) for error code.
}

# <<<<<<<<<<<<<<<<<<<<<<<< handler functions <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> event handlers >>>>>>>>>>>>>>>>>>>>>>>>

# Register CTRL+C event handler
trap on_ctrl_c SIGINT

# <<<<<<<<<<<<<<<<<<<<<<<< event handlers <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> functions >>>>>>>>>>>>>>>>>>>>>>>>

function show_help () {
    echo "
Usage: ${0} [-f FILE]
Decodes given encoded URL from input stream, or given file.

OPTIONS:
    -f, --file	Input file to read encoded URLs from.
" # help message
}

# Usage: urldecode url
# Credit: https://unix.stackexchange.com/a/187256
function urldecode () {
    local urlEncoded="${1//+/ }"
    printf '%b' "${urlEncoded//%/\\x}"
}

# <<<<<<<<<<<<<<<<<<<<<<<< functions <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> argument parsing >>>>>>>>>>>>>>>>>>>>>>>>

while (( $# > 0 )); do
    case "${1}" in
        -f|--file)
        numOfArgs=1 # number of switch arguments
        if (( $# < numOfArgs + 1 )); then
            echo "ERROR: missing filepath." 1>&2
            show_help
            exit 2
        else
            if [ -f "${2}" ]; then
                urls=$(cat ${2})
            else
                echo "ERROR: file does not exist."
                show_help
                exit 4
            fi
            shift $((numOfArgs + 1)) # shift 'numOfArgs + 1' to bypass switch and its value
        fi
        ;;
        -h|--help)
        show_help
        exit 0
        ;;
        *) # unknown flag/switch
        echo "ERROR: invalid argument." 1>&2
        show_help
        exit 3
    esac
done

# <<<<<<<<<<<<<<<<<<<<<<<< argument parsing <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> rest of code >>>>>>>>>>>>>>>>>>>>>>>>

# if URL doesn't exist then read from STDIN
if ! [ "${urls}" ]; then
    read -rd '\n' urls
fi

# decode given URLs
for url in ${urls[@]}; do
    urldecode "${url}"
    echo
done

# <<<<<<<<<<<<<<<<<<<<<<<< rest of code <<<<<<<<<<<<<<<<<<<<<<<<