#!/usr/bin/env bash

# Title:         banner
# Description:   display a banner
# Author:        Amr Elsayyad <amrelsayyad96@outlook.com>
# Date:          2022-09-10
# Version:       1.0.1

# Exit codes
# ==========
# 0   no error
# 1   script interrupted
# 2   missing argument
# 3   invalid argument
# 4   invalid color


# >>>>>>>>>>>>>>>>>>>>>>>> handler functions >>>>>>>>>>>>>>>>>>>>>>>>

# CTRL+C event handler
function on_ctrl_c() {
    echo # Set cursor to the next line of '^C'
    tput cnorm # show cursor. You need this if animation is used.
    # i.e. clean-up code here
    echo "terminated by signal interrupt" 1>&2
    exit 1 # Don't remove. Use a number (1-255) for error code.
}

# <<<<<<<<<<<<<<<<<<<<<<<< handler functions <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> event handlers >>>>>>>>>>>>>>>>>>>>>>>>

# Register CTRL+C event handler
trap on_ctrl_c SIGINT

# <<<<<<<<<<<<<<<<<<<<<<<< event handlers <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> functions >>>>>>>>>>>>>>>>>>>>>>>>

# Usage: bannerColor "message" "color" "decorator"
function bannerColor() {
    case ${2} in
        black) color=0
        ;;
        red) color=1
        ;;
        green) color=2
        ;;
        yellow) color=3
        ;;
        blue) color=4
        ;;
        magenta) color=5
        ;;
        cyan) color=6
        ;;
        white) color=7
        ;;
        *) echo "Error: color is not valid." 1>&2; exit 4
        ;;
    esac

    local msg="${3} ${1} ${3}"
    local edge
    edge=${msg//?/$3}
    tput setaf ${color}
    tput bold
    echo "${edge}"
    echo "${msg}"
    echo "${edge}"
    tput sgr 0
    echo
}

# <<<<<<<<<<<<<<<<<<<<<<<< functions <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> argument parsing >>>>>>>>>>>>>>>>>>>>>>>>

# default color
color='white'

# default decorator
decorator='*'

# argument parsing
POSITIONAL=()
while (( $# > 0 )); do
    case "${1}" in
        -c|--color)
        # check if argument is after a positional argument
        if (( ${#POSITIONAL[@]} > 0 )); then
            echo "argument '${POSITIONAL[@]}' not understood." 1>&2
            exit 3
        fi
        # get switch arguments
        numOfArgs=1 # number of switch arguments
        if (( $# < numOfArgs + 1 )); then
            echo "missing argument for '${1}' option" 1>&2
            exit 2
        else
            color=${2}
            shift $((numOfArgs + 1)) # shift 'numOfArgs + 1' to bypass switch and its value
        fi
        ;;
        -d|--decorator)
        # check if argument is after a positional argument
        if (( ${#POSITIONAL[@]} > 0 )); then
            echo "argument '${POSITIONAL[@]}' not understood." 1>&2
            exit 3
        fi
        # get switch arguments
        numOfArgs=1 # number of switch arguments
        if (( $# < numOfArgs + 1 )); then
            echo "missing argument for '${1}' option" 1>&2
            exit 2
        else
            decorator=${2}
            shift $((numOfArgs + 1)) # shift 'numOfArgs + 1' to bypass switch and its value
        fi
        ;;
        -m|--message)
        # check if argument is after a positional argument
        if (( ${#POSITIONAL[@]} > 0 )); then
            echo "argument '${POSITIONAL[@]}' not understood." 1>&2
            exit 3
        fi
        # get switch arguments
        numOfArgs=1 # number of switch arguments
        if (( $# < numOfArgs + 1 )); then
            echo "missing argument for '${1}' option" 1>&2
            exit 2
        else
            message=${2}
            shift $((numOfArgs + 1)) # shift 'numOfArgs + 1' to bypass switch and its value
        fi
        ;;
        *) # unknown flag/switch
        if [[ "${1}" =~ ^- ]]; then
            echo "argument ${1} not understood." 1>&2
            exit 3
        else
            POSITIONAL+=("${1}")
            shift
        fi
        ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional params

# <<<<<<<<<<<<<<<<<<<<<<<< argument parsing <<<<<<<<<<<<<<<<<<<<<<<<


# >>>>>>>>>>>>>>>>>>>>>>>> rest of code >>>>>>>>>>>>>>>>>>>>>>>>

# check for positional arguments
if (( ${#POSITIONAL[@]} > 0 )); then
    if [ "${message}" ]; then
        # if there are both a positional arg and a message arg
        echo "argument '${POSITIONAL[@]}' not understood." 1>&2
        exit 3
    elif (( ${#POSITIONAL[@]} > 1 )); then
        # if more than 1 positional arg
        echo "argument '${POSITIONAL[@]:1}' not understood." 1>&2
        exit 3
    else
        # if the positional arg is the message
        message=${POSITIONAL[0]}
    fi
fi

# check for existence of message
if [ "${message}" ]; then
    bannerColor "${message}" "${color}" "${decorator}"
else    
    echo "No message to display!" 1>&2
fi

# <<<<<<<<<<<<<<<<<<<<<<<< rest of code <<<<<<<<<<<<<<<<<<<<<<<<